"""Provides `apl` magics in Jupyter and IPython"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_core.ipynb.

# %% auto 0
__all__ = ['APLMagic', 'create_magic', 'load_ipython_extension', 'create_ipython_config']

# %% ../00_core.ipynb
from pynapl.APL import APL
from pathlib import Path
from IPython.core.magic import register_cell_magic
from IPython.display import display, HTML
from IPython.paths import get_ipython_dir

# %% ../00_core.ipynb
class APLMagic:
    def __init__(self):
        self.o = APL()
        self.script_loaded = False

    def apl(self, line, cell=None):
        if line and not cell: cell=line
        if not self.script_loaded:
            display(HTML('<script src="https://abrudz.github.io/lb/lb.js"></script>'))
            self.script_loaded = True
        res = self.o.eval(cell)
        if line: return res

# %% ../00_core.ipynb
def create_magic(shell=None):
    if not shell: shell = get_ipython()
    apl_magic = APLMagic()
    shell.register_magic_function(apl_magic.apl, 'line_cell', 'apl')

# %% ../00_core.ipynb
def load_ipython_extension(ipython): create_magic(shell=ipython)

# %% ../00_core.ipynb
def create_ipython_config():
    ipython_dir = Path(get_ipython_dir())
    cf = ipython_dir/'profile_default'/'ipython_config.py'
    cf.parent.mkdir(parents=True, exist_ok=True)
    if cf.exists() and 'aplnb' in cf.read_text(): return print('aplnb already installed!')
    with cf.open(mode='a') as f: f.write("\nc.InteractiveShellApp.extensions.append('aplnb')\n\n")
    print(f"Jupyter config updated at {cf}")
